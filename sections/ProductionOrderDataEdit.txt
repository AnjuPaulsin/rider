import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router";
import { Link, useParams } from "react-router-dom";
import States from "../../Common/States";
import Cities from "../../Common/Cities";
import Countries from "../../Common/Countries";
import Select from "react-select";
import moment from "moment";

const  ProductionOrderDataEdit= (props) => {

    let statusOptions = [ {value:"Draft", label:"Draft"},
    {value:"Inproduction", label:"Inproduction"},
    {value:"Closed", label:"Closed"}]

    const [id, setId] = useState(0);
    const [manufacturinglocations,setManufacturinglocations]=useState("");
    const [manufacture,setManufacture]=useState("");
    // const[man,setMan]=useState("")
    const [products,setProducts]=useState("");
    const [prod,setProd]=useState("");
    const [productionline,setProductionline]=useState("");
    const [production,setProduction]=useState("");
    const [processOrderNumber, setProcessOrderNumber] = useState("");
    const [batch,setBatch]=useState("");
    const [created_by,setCreatedby]=useState("");
    const [status,setStatus]=useState("");
    const [regulation,setRegulation]=useState("");
    const [packaging_Version,setPackVer]=useState("");
    const [expiration_date,setExpir]=useState("");
    const [production_date,setProductiondate]=useState("");
    const [productionOrderEditID, setProductionOrderEditID] = useState();
    const [statusOptionsSelected, setStatusOptionsSelected] = useState("");
    const [statusOptionsState, setStatusOptionsState] = useState(statusOptions);
    const [saveButtonState, setSaveButtonState] = useState("true");
    const[serialno,setSerialno]=useState("")
    const[produced,setProduced]=useState("");
    const[requested,setRequested]=useState("");
    const [statusReceivedFromDataGrid, setStatusReceivedFromDataGrid] = useState("");

    const [showPropertiesState, setShowPropertiesState] = useState(false);
    const [showHrfState, setShowHrfState] = useState(false);
    const [showIdentifierState, setShowIdentifierState] = useState(false);
    const [manLocationSelectedLabel,setManLocationSelectedLabel] = useState("");
    const [manLocationSelectedValue,setManLocationSelectedValue] = useState("");
    const [productSelectedLabel,setProductSelectedLabel] = useState("");
    const [productSelectedValue,setProductSelectedValue] = useState("");
    const [productionlineSelectedLabel,setProductionlineSelectedLabel] = useState("");
    const [productionlineSelectedValue,setProductionlineSelectedValue] = useState("");
    const[sourceloc,setSourceLocationSelectedDefault]=useState("")

    const navigate = useNavigate();

    const { operation } = useParams();
    const { uniqueID } = useParams();
    let optionsNew = [];
    let optionsNewproduct=[];
    let optionsNewline=[];
    var loggedInUsername=window.localStorage.getItem('loggedInUsername')
    var loggedInUserrole=window.localStorage.getItem('loggedInUserrole')
    //alert(operation);

    var warningDIV = <div className="alert alert-success pt-4" role="alert">
        <h5>Input all the data</h5>
      </div>

const [warningDIVstate, setWarningDIVstate] = useState(warningDIV);
  function getProductOrderEditRequestData() {
    // var productionOrderEditID = window.localStorage.getItem("productionOrderEditID");
    //alert(productionOrderEditID);
    var productionorderEditID = uniqueID;
    // alert(productionOrderEditID);
    axios
      .get("http://127.0.0.1:8000/master/productionorder/"+productionorderEditID+"/",
      
    )
    .then((res) => {
      
      //alert(res.data[0].batch_number);
      //setBatch(res.data[0].batch_number)
// setMan(res.data[0].manufacturing_location)
      //setCreatedby(res.data[0].created_by)
      //setStatus(res.data[0].status)
      //setProductiondate(res.data[0].production_date)
      //setExpir(res.data[0].expiration_date)
      //setPackVer(res.data[0].packaging_Version)
      //setRegulation(res.data[0].regulation)
      setCreatedby(res.data[0].created_by);
      setRegulation(res.data[0].regulation);
      setProductiondate(moment(res.data[0].production_date).utc().format('YYYY-MM-DD'));
      setPackVer(res.data[0].packaging_Version);
      //setExpir(res.data[0].expiration_date);
      setExpir(moment(res.data[0].expiration_date).utc().format('YYYY-MM-DD'));
      setStatusOptionsSelected(res.data[0].status);

      setProcessOrderNumber(res.data[0].process_order_number);
      setBatch(res.data[0].batch_number);
      setManufacture(res.data[0].manufacturing_location);
      setProd(res.data[0].product_conn);
      setProduction(res.data[0].Production_line_id);
      setSerialno(res.data[0].serialnoprovider);
      setSelectedManLocationFunction(res.data[0].manufacturing_location);
      setSelectedProductFunction(res.data[0].product_conn);
      setSelectedProductionlineFunction(res.data[0].Production_line_id);
      //setStatus(localStorage.getItem("status"));
      //setRegulation(localStorage.getItem("regulation"));
      //setCreatedby(localStorage.getItem("created_by"));
      //setPackVer(localStorage.getItem("packaging_Version"));
      //setExpir(localStorage.getItem("expiration_date"));
      //setProductiondate(localStorage.getItem("production_date"));
      // setRequested(localStorage.getItem("requested"))
      // setProduced(localStorage.getItem("produced"))
      // getProcessorderindividual()
      // if(res.data[0].created_by === window.localStorage.getItem('loggedInUsername')) {
      //   setSaveButtonState(false);
      // }
      // else {
      //   setSaveButtonState(true);
      // }
      
  
    });
  } 
  function setSelectedManLocationFunction(selectedManLocationFunParam) {
    //  alert(selectedManLocationFunParam);
    axios
      .get("http://localhost:8000/productionline/manufacturinglocation/",
      )
      .then((res) => {
        // let batchNumberOptionsInitial = "";
        //  alert("anu")
        res.data.map(data => {
      //  alert(data.id)
        // alert(selectedManLocationFunParam)
        if(data.id ===parseInt(selectedManLocationFunParam)){
          // alert(data.id)
          // alert(data.name)
          // alert(selectedManLocationFunParam)
     
          setManLocationSelectedLabel(data.name);
          setManLocationSelectedValue(data.id);
           
          //setSourceLocationSelectedDefault({ value: 8, label: data.name });
          //setSourceLocationOptionsWidget(sourceLocationOptionsWidgetTemp);
        }
      });

    });
  }
  function setSelectedProductFunction(selectedProductFunParam) {
    //alert(selectedDestinationLocationFunParam);
    axios
      .get("http://localhost:8000/master/product/",
      )
      .then((res) => {
        // let batchNumberOptionsInitial = "";
        // alert("anu")
        res.data.map(data => {

        if(data.id === selectedProductFunParam) {
          setProductSelectedLabel(data.name);
          setProductSelectedValue(data.id);
           
          // setSourceLocationSelectedDefault({ value: 8, label: data.name });
          //setSourceLocationOptionsWidget(sourceLocationOptionsWidgetTemp);
        }
      });

    });
  }

  function  setSelectedProductionlineFunction(selectedProductionlineFunParam) {
    //alert(selectedDestinationLocationFunParam);
    axios
      .get("http://localhost:8000/productionline/registeredsystem/",
     )
      .then((res) => {
        // let batchNumberOptionsInitial = "";
        
        res.data.map(data => {
       
        if(data.id ===selectedProductionlineFunParam) {
          // alert(selectedProductionlineFunParam);
          // alert(data.name)
          // alert(selectedProductionlineFunParam);
          setProductionlineSelectedLabel(data.line);
          setProductionlineSelectedValue(data.id);
           
          // setSourceLocationSelectedDefault({ value: 6, label: data.name });
          // productionlinewidget(sourceloc);
        }
      });

    });
  }
  // alert(productionlineSelectedLabel)
  function getManufacturinglocations() {
    axios
      .get("http://localhost:8000/productionline/manufacturinglocation/",
      )
      .then((res) => {
        // let batchNumberOptionsInitial = "";
        // alert("anu")
        res.data.map(data => {
        optionsNew.push({ value: data.id, label: data.name });
      });
        
      setManufacturinglocations(optionsNew);
      //  alert(optionsNew)
    });
  }

  function getProducts() {
    axios
    .get("http://localhost:8000/master/product/",
    )
    .then((res) => {
      // let batchNumberOptionsInitial = "";
    
      res.data.map(data => {
        // alert(data.status)
        if(data.status==true)
        {
          optionsNewproduct.push({ value: data.id, label: data.name });
        }
      });
            
      setProducts(optionsNewproduct);
     
    });
  }

  function getProductionlines() {
    axios
     .get("http://localhost:8000/productionline/registeredsystem/",
      )
      .then((res) => {
        // let batchNumberOptionsInitial = "";
        //  alert("jinu")
        res.data.map(data => {
        optionsNewline.push({ value:data.id, label: data.line});
      });
                
      setProductionline(optionsNewline);
        // alert(productionline)
      });
  }
  useEffect(() => {

    //alert(window.localStorage.getItem("productionOrderEditID"));
    getManufacturinglocations();
    getProducts();
    getProductionlines();
    if(operation === 'edit') {

      getProductOrderEditRequestData();
  /*
      setId(localStorage.getItem("id"));
      setProcessOrderNumber(localStorage.getItem("process_order_number"));
      setBatch(localStorage.getItem("batch_number"));
      setManufacture(localStorage.getItem("manufacturing_location"));
      setProd(localStorage.getItem("product_conn"));
      setProduction(localStorage.getItem("Production_line_id"));
      setStatus(localStorage.getItem("status"));
      setRegulation(localStorage.getItem("regulation"));
      setCreatedby(localStorage.getItem("created_by"));
      setPackVer(localStorage.getItem("packaging_Version"));
      setExpir(localStorage.getItem("expiration_date"));
      setProductiondate(localStorage.getItem("production_date"));
      // setRequested(localStorage.getItem("requested"))
      // setProduced(localStorage.getItem("produced"))
      // getProcessorderindividual()
  */
    }
  
  }, []);


  const statusOptionsChangeFunction = event => {
    //setBatchNumber(event.value);    
    //alert(event.value);

    setStatusOptionsSelected(event.value);
  }

  function getProcessOrderNumberData() {
    //alert(processOrderNumber);
    if(processOrderNumber == "") {
      warningDIV =  <div className="alert alert-danger pt-4" role="alert">
          <h5>Input process order number</h5>
        </div>

      setWarningDIVstate(warningDIV);
    }
    axios
    .get("http://127.0.0.1:8000/sapapp/sapproductionorder/"+processOrderNumber+"/",
 
    )
    .then((res) => {
      if(res.data.length > 0) {
        setBatch(res.data[0].batch_number)
// setMan(res.data[0].manufacturing_location)
        setCreatedby(res.data[0].created_by)
        setStatus(res.data[0].status)
        setProductiondate(res.data[0].production_date)
        setExpir(res.data[0].expiration_date)
        setPackVer(res.data[0].packaging_Version)
        setRegulation(res.data[0].regulation)
        setSerialno(res.data[0].serialnoprovider)
        setProduced(res.data[0].produced)
        setRequested(res.data[0].requested)

        
        warningDIV =  <div className="alert alert-success pt-4" role="alert">
        <h5>Production order fetched from SAP successfully</h5>
      </div>

    setWarningDIVstate(warningDIV);
      }
      else {
        warningDIV =  <div className="alert alert-danger pt-4" role="alert">
            <h5>process order number does not exists in SAP</h5>
          </div>

        setWarningDIVstate(warningDIV);
      }

    });
  }


  const getManufacturingasoptions = event => {
    // alert(event.value)
    setManufacture(event.value);
    setManLocationSelectedLabel(event.label);
    setManLocationSelectedValue(event.value);
    // setCustomername(event.label); 
    //  window.localStorage.setItem(option)    
  }
  const getProductasoptions = event => {
    // alert(event.value)
    setProd(event.value); 
    setProductSelectedLabel(event.label);
    setProductSelectedValue(event.value);
    // setCustomername(event.label); 
    //  window.localStorage.setItem(option)    
  }
  const getProductionlineasoptions = event => {
    //alert(event.value)
    setProduction(event.value); 
    setProductionlineSelectedLabel(event.label);
    setProductionlineSelectedValue(event.value);
    // setCustomername(event.label); 
    //  window.localStorage.setItem(option)    
  }

    const handleSubmit = (e) => {
      e.preventDefault();
      console.log("clicked");
      //alert(address);
      var cuslocEditID = uniqueID;
      var testPassed = "false";
    
    
      if(processOrderNumber != "") {
        testPassed = "true";
      }
      else {
        warningDIV =  <div className="alert alert-danger pt-4" role="alert">
          <h5>Input process order number</h5>
        </div>
  
        setWarningDIVstate(warningDIV);
        testPassed = "false";
      }
  
      //////////////////  Product name testing
  
      if(testPassed == "true") {
        if(prod != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
              <h5>Input product name</h5>
            </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }
      
      ///////  Batch number testing
  
      if(testPassed == "true") {
        if(batch != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                          <h5>Input batch number</h5>
                        </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }
  
      ///////  Manufacturing location testing
  
      if(testPassed == "true") {
        if(manufacture != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                          <h5>Input manufacturing location</h5>
                        </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }

  

  
      ////////   Regulation testing
  
      if(testPassed == "true") {
        if(regulation != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                          <h5>Input regulation</h5>
                        </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }
  
  //////production date
  
  if(testPassed == "true") {
    if(production_date!= "") {
      testPassed = "true";
    }
    else {
      warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                      <h5>Input production date</h5>
                    </div>
  
      setWarningDIVstate(warningDIV);
      testPassed = "false";
    }
  }
  //////serialno provider
  
  
  if(testPassed == "true") {
    if(serialno != "") {
      testPassed = "true";
    }
    else {
      warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                      <h5>Input Serial number</h5>
                    </div>
  
      setWarningDIVstate(warningDIV);
      testPassed = "false";
    }
  }
  
  
      //////////  Packing version testing
  
      if(testPassed == "true") {
        if(packaging_Version != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                          <h5>Input packing version</h5>
                        </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }
  
  ///expiration date
  
  if(testPassed == "true") {
    if(expiration_date != "") {
      testPassed = "true";
    }
    else {
      warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                      <h5>Input Expiration date</h5>
                    </div>
  
      setWarningDIVstate(warningDIV);
      testPassed = "false";
    }
  }

  
  
      ///////////  Production line testing
  
      if(testPassed == "true") {
        if(production != "") {
          testPassed = "true";
        }
        else {
          warningDIV =  <div className="alert alert-danger pt-4" role="alert">
                          <h5>Input production line</h5>
                        </div>
  
          setWarningDIVstate(warningDIV);
          testPassed = "false";
        }
      }
  
      if(testPassed == "true") {
        warningDIV =  <div className="alert alert-warning pt-4" role="alert">
                        <h5>Verifying data</h5>
                      </div>
  
        setWarningDIVstate(warningDIV);
      }
      if(testPassed === "true") {
        var productionorderEditID = uniqueID;

    
    

    
  
        axios
          .put(`http://localhost:8000/master/productionorder/update/${productionorderEditID}`, 
            
          {
            "process_order_number":processOrderNumber, 
            "product_conn":prod,   
            "batch_number": batch, 
            "manufacturing_location":manufacture,  
            "Production_line_id":production,
            "created_by":loggedInUsername,
            "status": statusOptionsSelected,
            "production_date":production_date,
            "regulation":regulation,
            "packaging_Version":packaging_Version,
            "expiration_date":expiration_date,
            "serialnoprovider":serialno,
            "loggedInUsername":loggedInUsername,
            "loggedInUserrole":loggedInUserrole
            
          })
          .then((res) => {
                    //alert(res.data['email']);
                
              navigate("/productionorder");
                

          });
      
      }
    }
  
    var processnowidget=<input
    type="text"
    className="form-control"
    onChange={(e) => setProcessOrderNumber(e.target.value)}
    value={processOrderNumber}
  />
  var productwidget=<Select  className="selectboxcolor" options={products} onChange={getProductasoptions} value={{label:productSelectedLabel, value:productSelectedValue}}/>
  var batchnowidget=<input
    type="text"
    className="form-control"
    value={batch}
    onChange={(e) => setBatch(e.target.value)}
  /> 
  var manufactwidget= <Select  className="selectboxcolor" options={manufacturinglocations} onChange={getManufacturingasoptions} value={{label:manLocationSelectedLabel, value:manLocationSelectedLabel}}/>

    var regulationwidget= <input
          type="text"
          className="form-control"
          value={regulation}
          onChange={(e) => setRegulation(e.target.value)}
        /> 
    var productiondatewidget=<input
        type="Date"
        className="form-control"
        value={production_date}
        onChange={(e) => setProductiondate(e.target.value)}
      />
    var serialnowidget=<input
      type="text"
      className="form-control"
      value={serialno}
      onChange={(e) => setSerialno(e.target.value)}
      /> 
    var packageverwidget=<input
        type="text"
        className="form-control"
        value={packaging_Version}
        onChange={(e) => setPackVer(e.target.value)}
        /> 
    var expwidget=  <input
        type="Date"
        className="form-control"
        value={expiration_date}
        onChange={(e) => setExpir(e.target.value)}
        /> 

    var statusOptionsWidget=  <Select  className="selectboxcolor" onChange={statusOptionsChangeFunction} 
                                      options={statusOptionsState}
                                      value={{label:statusOptionsSelected, value:statusOptionsSelected}}  
                                  />
    var productionlinewidget= <Select  className="selectboxcolor" options={productionline} onChange={getProductionlineasoptions}  value={{label:productionlineSelectedLabel, value:productionlineSelectedValue}}/>





    return(
      <>
          <div class="container-fluid">
              <div class="card shadow mb-4"> 
                  <div class="card-header py-3">
                      <div className='row'>
                          <div className='col-10'>
                                <h5 class="m-0 font-weight-bold text-primary">Update Production Order</h5>
                          </div>
                      </div>
                                                      
                  </div>

                  <div class="card-body">  
                    {warningDIVstate} 
                    <table class="table table-borderless productionOrderReportSearchTable" id="productionOrderReportSearchTableID">
                      <tbody>
                      <tr>
      <td class="productionOrderReportSearchTD">Process Order Number</td>
      <td class="productionOrderReportSearchTD">
      {processnowidget}
</td>

      {/* <td class="productionOrderReportSearchTD">
{fetchwidget}
</td> */}

     
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Product</td>
      <td class="productionOrderReportSearchTD">
   {productwidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Batch Number</td>
      <td class="productionOrderReportSearchTD">
    {batchnowidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Manufacturing Location</td>
      <td class="productionOrderReportSearchTD">
     {manufactwidget}
      </td>
    </tr>


    <tr>
      <td class="productionOrderReportSearchTD">Regulation</td>
      <td class="productionOrderReportSearchTD">
       {regulationwidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Production Date</td>
      <td class="productionOrderReportSearchTD">
       {productiondatewidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Serialno Provider</td>
      <td class="productionOrderReportSearchTD">
       {serialnowidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">packaging_Version</td>
      <td class="productionOrderReportSearchTD">
      {packageverwidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Expiration date</td>
      <td class="productionOrderReportSearchTD">
   {expwidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Status</td>
      <td class="productionOrderReportSearchTD">
        {statusOptionsWidget}
      </td>
    </tr>
    <tr>
      <td class="productionOrderReportSearchTD">Production line</td>
      <td class="productionOrderReportSearchTD">
      {productionlinewidget}
      </td>
    </tr>

                        <tr></tr>
                        <tr>
                          <td class="productionOrderReportSearchTD">
                            <button
                              type="submit"
                              className="btn btn-primary"
                              // disabled = {saveButtonState}
                              onClick={handleSubmit}>
                                Save data
                            </button>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                </div>
            </div>
          </div>            
      </>
    )
};

export default  ProductionOrderDataEdit;
